<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<bean id="pldProperty" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true"></property>
		<property name="fileEncoding" value="utf-8"></property>
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"></property>
		<property name="locations">
			<list>
				<value>/WEB-INF/jdbc.properties</value>
				<value>/WEB-INF/system.properties</value>
			</list>
		</property>
	</bean>	
	
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
	    <property name="dataSource" ref="multipleDataSource" />  
	</bean> 
	
	<tx:advice id="commonTranscation" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="read*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="select*" propagation="REQUIRED" read-only="true" />
			<tx:method name="is*" propagation="REQUIRED" read-only="true" />
			<tx:method name="export*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:advisor advice-ref="commonTranscation"  pointcut="execution(* com.huangtl.blogmgr.service.impl..*.*(..))"/>
	</aop:config>
	
	<bean id="myBatisSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>
	<bean id="myBatisDao" abstract="true">
		<property name="sqlSessionTemplate" ref="myBatisSqlSessionTemplate"></property>
	</bean> 
	
	<!-- 多库数据源 -->
	<bean id="multipleDataSource" class="com.huangtl.blogmgr.core.spring.MultipleDataSource">
		<property name="defaultTargetDataSource" ref="blogDataSource"></property>
		<property name="targetDataSources">
			<map>
				<entry key="blogDataSource" value-ref="blogDataSource"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 数据源
	    ==================常用==============
		name : 代号
		maxActive :最大并发连接数
		initialSize: 初始化连接数量
		maxWait: 配置获取连接等待超时的时间
		minIdle:最小连接数
		timeBetweenEvictionRunsMillis: 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		minEvictableIdleTimeMillis: 配置一个连接在池中最小生存的时间，单位是毫秒
		poolPreparedStatements: false
		maxOpenPreparedStatements: 20
		================测试===================
		validationQuery : 如：select 'sql connect'
		testWhileIdle :true
		testOnBorrow: false
		testOnReturn:false
		=====================监控配置=====================
		filters :扩展插件 [监控统计用的filter:stat][日志用的filter:log4j ][防御sql注入的filter:wall]
		proxyFilters:自定义filter
		timeBetweenLogStatsMillis:每隔10分钟把监控数据输出到日志中
	 -->
	<bean id="blogDataSource"  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method = "close">
		 <!-- =================数据库基本信息配置 ====================-->
		 <property name="name" value="pld-blog"></property>
         <property name = "url" value = "${blog.mysql.url}" />  
         <property name = "username" value = "${blog.mysql.username}" />  
         <property name = "password" value = "${blog.mysql.password}" />  
         <property name = "driverClassName" value = "${blog.mysql.driver}" />  
         <property name = "maxActive" value = "${jdbc.maxConnectionCount}" />
         <property name = "initialSize" value = "${jdbc.minConnectionCount}" />
         <property name = "maxWait" value = "${jdbc.maxActiveTime}" />
         <property name = "minIdle" value = "${jdbc.minConnectionCount}" /> 
         <!--=====================监控配置=====================  -->
          <property name = "filters" value = "wall" /> 
          <property name="proxyFilters">
          	<list>
          		<ref bean="mergeStat"/>
          	</list>
          </property>
          <property name ="statLogger" ref ="localStatLogger" />
         <property name ="timeBetweenLogStatsMillis" value ="100000" />
         
	</bean>
	<bean id="mergeStat" class="com.alibaba.druid.filter.stat.MergeStatFilter">
    	<property name="logSlowSql" value="true" />
	</bean>
	<bean id ="localStatLogger" class ="com.alibaba.druid.pool.DruidDataSourceStatLoggerImpl" >
		<property name="logger" ref="sLF4JImpl"></property>
	</bean>
	<bean id="sLF4JImpl" class="com.alibaba.druid.support.logging.SLF4JImpl">
		<constructor-arg  value="druid.statlog"></constructor-arg>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource"></property>
		<property name="configLocation" value="/WEB-INF/mybatis.xml"></property>
		<property name="mapperLocations">
			<list>
				<!-- <value>classpath:org/pld/wx/model/mapper/*.xml</value> -->
				<value>classpath:com/huangtl/blogmgr/dao/mapper/*.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- druid spring 监控 -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
	   <property name="patterns">
	       <list>
	       <value>com.huangtl.blogmgr.*</value>
	       </list>
	   </property>
	</bean>
	
	<aop:config proxy-target-class="true">
	   <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
	<!-- redis 
	<bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="maxWaitMillis" value="${redis.maxWait}"></property>
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean>  
    
     <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
     	<prop2erty name="hostName" value="${redis.host}"></property>
     	<property name="port" value="${redis.port}"></property>
     	<property name="poolConfig" ref="redisPoolConfig"></property>
     </bean>
      
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory"   ref="redisConnectionFactory" />  
    </bean>
    
    <bean id="redisDao" abstract="true">
		<property name="redisTemplate" ref="redisTemplate"></property>
	</bean>--><!-- /redis -->
    
    
    <!-- 导入缓存配置 -->
    <import resource="./spring-cache.xml"/>
	<!-- 导入模块bean -->
	<import resource="./blgmgr.xml"/>
</beans>
